[{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-3c9d586e-bd26-4b46-8690-3faaa18ccf38.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Case Study: Highly Parallel Genome-wide Expression Profiling of Individual Cells Using Nanoliter Droplets","text":"Load useful packages","code":"library(hcaCaseStudies) library(hca) library(dplyr)"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-3c9d586e-bd26-4b46-8690-3faaa18ccf38.html","id":"project-information","dir":"Articles","previous_headings":"Setup","what":"Project information","title":"Case Study: Highly Parallel Genome-wide Expression Profiling of Individual Cells Using Nanoliter Droplets","text":"Set project id Display information project","code":"project_id <- \"3c9d586e-bd26-4b46-8690-3faaa18ccf38\" project_information(project_id) ## Title ##   Highly Parallel Genome-wide Expression Profiling of Individual Cells ##   Using Nanoliter Droplets ## Contributors (unknown order; any role) ##   Joshua R Sanes, Rahul Satija, Alex K Shalek, Anindita Basu, James ##   Nemesh, Itay Tirosh, John J Trombetta, Aviv Regev, Ami Day, Evan Z ##   Macosko, Karthik Shekhar, Allison R Bialas, Steven A McCarroll, David ##   A Weitz, Nolan Kamitaki, Emily M Martersteck, Melissa Goldman ## Description ##   Cells, the basic units of biological structure and function, vary ##   broadly in type and state. Single-cell genomics can characterize cell ##   identity and function, but limitations of ease and scale have ##   prevented its broad application. Here we describe Drop-seq, a ##   strategy for quickly profiling thousands of individual cells by ##   separating them into nanoliter-sized aqueous droplets, associating a ##   different barcode with each cell's RNAs, and sequencing them all ##   together. Drop-seq analyzes mRNA transcripts from thousands of ##   individual cells simultaneously while remembering transcripts' cell ##   of origin. We analyzed transcriptomes from 44,808 mouse retinal cells ##   and identified 39 transcriptionally distinct cell populations, ##   creating a molecular atlas of gene expression for known retinal cell ##   classes and novel candidate cell subtypes. Drop-seq will accelerate ##   biological discovery by enabling routine transcriptional profiling at ##   single-cell resolution. ## doi: 10.1016/j.cell.2015.05.002 ## url: https://www.cell.com/fulltext/S0092-8674(15)00549-8 ## project: https://data.humancellatlas.org/explore/projects/3c9d586e-bd26-4b46-8690-3faaa18ccf38"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-3c9d586e-bd26-4b46-8690-3faaa18ccf38.html","id":"conventions","dir":"Articles","previous_headings":"Setup","what":"Conventions","title":"Case Study: Highly Parallel Genome-wide Expression Profiling of Individual Cells Using Nanoliter Droplets","text":"Statistics calculated locally use local.* column names, e.g., local.cellCount.","code":""},{"path":[]},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-3c9d586e-bd26-4b46-8690-3faaa18ccf38.html","id":"project-samples","dir":"Articles","previous_headings":"Data processing","what":"Project & samples","title":"Case Study: Highly Parallel Genome-wide Expression Profiling of Individual Cells Using Nanoliter Droplets","text":"Create filter identify project Find project Samples associated project preliminary exploration sample descriptions Invariant information really telling us experiment…","code":"project_filter <- filters(projectId = list(is = project_id)) p <- projects(project_filter) p |> glimpse() ## Rows: 1 ## Columns: 5 ## $ projectId       <chr> \"3c9d586e-bd26-4b46-8690-3faaa18ccf38\" ## $ projectTitle    <chr> \"Highly Parallel Genome-wide Expression Profiling of I… ## $ genusSpecies    <chr> \"Mus musculus\" ## $ samples.organ   <chr> \"eye\" ## $ specimens.organ <chr> \"eye\" p |> pull(projectTitle) |> noquote() ## [1] Highly Parallel Genome-wide Expression Profiling of Individual Cells Using Nanoliter Droplets. s <- samples(project_filter, as = \"tibble_expanded\")  ## all informative columns s |>     select(where(column_is_not_all_NA)) |>     DT::datatable() ## informative 'specimen' or donorOrganisms columns s |>     select(starts_with(\"specimens\") | starts_with(\"donorOrganisms\")) |>     select(where(column_is_informative)) ## # A tibble: 7 × 2 ##   specimens.id donorOrganisms.id        ##   <chr>        <chr>                    ## 1 GSM1626794   P14_mouse_retina_donor_2 ## 2 GSM1626795   P14_mouse_retina_donor_3 ## 3 GSM1626799   P14_mouse_retina_donor_7 ## 4 GSM1626793   P14_mouse_retina_donor_1 ## 5 GSM1626797   P14_mouse_retina_donor_5 ## 6 GSM1626796   P14_mouse_retina_donor_4 ## 7 GSM1626798   P14_mouse_retina_donor_6 s |>     select(where(column_is_experimentwide)) |>     distinct() |>     glimpse() ## Rows: 1 ## Columns: 34 ## $ cellSuspensions.organ                 <chr> \"eye\" ## $ cellSuspensions.organPart             <chr> \"retina\" ## $ donorOrganisms.biologicalSex          <chr> \"unknown\" ## $ donorOrganisms.developmentStage       <chr> \"Theiler stage 28\" ## $ donorOrganisms.disease                <chr> \"normal\" ## $ donorOrganisms.donorCount             <int> 1 ## $ donorOrganisms.genusSpecies           <chr> \"Mus musculus\" ## $ donorOrganisms.organismAge.unit       <chr> \"day\" ## $ donorOrganisms.organismAge.value      <chr> \"14.0\" ## $ donorOrganisms.organismAgeRange       <list> <1209600, 1209600> ## $ fileTypeSummaries.fileSource          <chr> \"GEO\" ## $ fileTypeSummaries.isIntermediate      <lgl> FALSE ## $ projects.estimatedCellCount           <int> 44808 ## $ projects.projectId                    <chr> \"3c9d586e-bd26-4b46-8690-3faaa18… ## $ projects.projectShortname             <chr> \"HighlyParallelExpressionProfili… ## $ projects.projectTitle                 <chr> \"Highly Parallel Genome-wide Exp… ## $ protocols.instrumentManufacturerModel <chr> \"Illumina NextSeq 500\" ## $ protocols.libraryConstructionApproach <chr> \"Drop-seq\" ## $ protocols.nucleicAcidSource           <chr> \"single cell\" ## $ protocols.pairedEnd                   <lgl> FALSE ## $ protocols.workflow                    <list> <\"analysis_protocol_normalizatio… ## $ samples.accessible                    <lgl> TRUE ## $ samples.disease                       <chr> \"normal\" ## $ samples.effectiveOrgan                <chr> \"eye\" ## $ samples.organ                         <chr> \"eye\" ## $ samples.organPart                     <chr> \"retina\" ## $ samples.sampleEntityType              <chr> \"specimens\" ## $ samples.source                        <chr> \"specimen_from_organism\" ## $ sources.sourceId                      <chr> \"f57ff40f-c923-4356-a0f7-807c82b… ## $ sources.sourceSpec                    <chr> \"tdr:datarepo-00aa7019:snapshot/… ## $ specimens.disease                     <chr> \"normal\" ## $ specimens.organ                       <chr> \"eye\" ## $ specimens.organPart                   <chr> \"retina\" ## $ specimens.source                      <chr> \"specimen_from_organism\""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-3c9d586e-bd26-4b46-8690-3faaa18ccf38.html","id":"data-files","dir":"Articles","previous_headings":"Data processing","what":"Data files","title":"Case Study: Highly Parallel Genome-wide Expression Profiling of Individual Cells Using Nanoliter Droplets","text":"project ‘fastq’ ‘txt.gz’ files. nine txt.gz files 7 samples – 7 ‘GSM’ sample files, two experiment-wide ‘GSE’ summary files Retrieve cache locally txt.gz files can extract data files, e.g., cell gene counts","code":"files0 <- files(project_filter) files0 ## # A tibble: 21 × 8 ##    fileId                    name  fileF…¹    size version proje…² proje…³ url   ##    <chr>                     <chr> <chr>     <dbl> <chr>   <chr>   <chr>   <chr> ##  1 d1f2fdc4-a8ec-4f1b-922e-… SRR1… fastq.… 2.68e10 2022-0… Highly… 3c9d58… http… ##  2 ec073678-a2cf-42f4-b795-… SRR1… fastq.… 2.17e10 2022-0… Highly… 3c9d58… http… ##  3 6373d4f0-6cde-4de2-81b3-… GSE6… txt.gz  5.31e 7 2022-0… Highly… 3c9d58… http… ##  4 f961d8f8-4acc-40b1-8c00-… GSE6… txt.gz  3.32e 8 2022-0… Highly… 3c9d58… http… ##  5 1846aca6-3e65-480d-b2bc-… GSM1… txt.gz  1.03e 7 2022-0… Highly… 3c9d58… http… ##  6 47a54560-93cb-4f85-89fe-… SRR1… fastq.… 2.47e10 2022-0… Highly… 3c9d58… http… ##  7 8b563c2a-57e2-4e51-bedf-… SRR1… fastq.… 9.48e 9 2022-0… Highly… 3c9d58… http… ##  8 594b651d-ee86-4c89-a2f7-… GSM1… txt.gz  8.83e 6 2022-0… Highly… 3c9d58… http… ##  9 c731fa4b-f63f-4d18-b18e-… GSM1… txt.gz  9.56e 6 2022-0… Highly… 3c9d58… http… ## 10 33c36b9e-5a07-430e-a360-… GSM1… txt.gz  5.58e 6 2022-0… Highly… 3c9d58… http… ## # … with 11 more rows, and abbreviated variable names ¹​fileFormat, ## #   ²​projectTitle, ³​projectId  files0 |>     count(fileFormat) ## # A tibble: 2 × 2 ##   fileFormat     n ##   <chr>      <int> ## 1 fastq.gz      12 ## 2 txt.gz         9  files1 <-     files0 |>     filter(fileFormat == \"txt.gz\") files1 |>     select(name) ## # A tibble: 9 × 1 ##   name                                                ##   <chr>                                               ## 1 GSE63472_P14Retina_merged_digital_expression.txt.gz ## 2 GSE63472_P14Retina_logDGE.txt.gz                    ## 3 GSM1626798_P14Retina_6.digital_expression.txt.gz    ## 4 GSM1626796_P14Retina_4.digital_expression.txt.gz    ## 5 GSM1626794_P14Retina_2.digital_expression.txt.gz    ## 6 GSM1626795_P14Retina_3.digital_expression.txt.gz    ## 7 GSM1626793_P14Retina_1.digital_expression.txt.gz    ## 8 GSM1626797_P14Retina_5.digital_expression.txt.gz    ## 9 GSM1626799_P14Retina_7.digital_expression.txt.gz file_path <-     files1 |>     filter(fileFormat == \"txt.gz\") |>     files_download() |>     unname()  files2 <-     files1 |>     left_join(tibble(         fileId = files1$fileId,         local.filePath = file_path     ), by = \"fileId\") files3 <-     files2 |>     geo_gsm_cell_count() |>     geo_gsm_gene_count()  files3 |>     select(name, local.cellCount, local.geneCount) ## # A tibble: 9 × 3 ##   name                                                local.cellCount local.ge…¹ ##   <chr>                                                         <int>      <int> ## 1 GSE63472_P14Retina_merged_digital_expression.txt.gz           49300      24658 ## 2 GSE63472_P14Retina_logDGE.txt.gz                              49300      24658 ## 3 GSM1626798_P14Retina_6.digital_expression.txt.gz               8280      20647 ## 4 GSM1626796_P14Retina_4.digital_expression.txt.gz               7650      20239 ## 5 GSM1626794_P14Retina_2.digital_expression.txt.gz               9000      20619 ## 6 GSM1626795_P14Retina_3.digital_expression.txt.gz               6120      20169 ## 7 GSM1626793_P14Retina_1.digital_expression.txt.gz               6600      20478 ## 8 GSM1626797_P14Retina_5.digital_expression.txt.gz               7650      19719 ## 9 GSM1626799_P14Retina_7.digital_expression.txt.gz               4000      20105 ## # … with abbreviated variable name ¹​local.geneCount"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-3c9d586e-bd26-4b46-8690-3faaa18ccf38.html","id":"count-matrix","dir":"Articles","previous_headings":"Data processing","what":"Count matrix","title":"Case Study: Highly Parallel Genome-wide Expression Profiling of Individual Cells Using Nanoliter Droplets","text":"GSE count matrices quite useful, know definitively map cell sample. compute count matrix concatenating counts GSM files.","code":"object_name <- \"local.countMatrix\" if (!cache_exists(project_id, object_name)) {     files3 |>         filter(startsWith(name, \"GSM\")) |>         geo_gsm_count_matrix() |>         cache_add(project_id, object_name) } ## 108.3 Mb after 33aa93b6c0_33aa93b6c0.gz ## 197.9 Mb after 33aa796f187_33aa796f187.gz ## 293.9 Mb after 33aa132441fe_33aa132441fe.gz ## 343.6 Mb after 33aa5910c81e_33aa5910c81e.gz ## 425.7 Mb after 33aa41ac7b29_33aa41ac7b29.gz ## 504.1 Mb after 33aa726f2a40_33aa726f2a40.gz ## 578.5 Mb after 33aa4a028702_33aa4a028702.gz count_matrix <- cache_read(project_id, object_name)  class(count_matrix)[1] # sparse matrix ## [1] \"dgCMatrix\" dim(count_matrix)      # genes x cells ## [1] 24760 49300 format(object.size(count_matrix), units = \"auto\") ## [1] \"439.5 Mb\""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-3c9d586e-bd26-4b46-8690-3faaa18ccf38.html","id":"singlecellexperiment","dir":"Articles","previous_headings":"Data processing","what":"SingleCellExperiment","title":"Case Study: Highly Parallel Genome-wide Expression Profiling of Individual Cells Using Nanoliter Droplets","text":"Column (sample) data Experiment-wide metadata Assemble SingleCellExperiment (come)","code":"geo_id <-     pull(files3, \"name\") |>     strsplit(\"_\") |>     vapply(head, character(1), 1L) files4 <- bind_cols(files3, local.geoId = geo_id)  colData <-     s |>     select(where(column_is_informative)) |>     left_join(         bind_cols(files3, local.geoId = geo_id),         by = c(samples.id = \"local.geoId\")     ) colData |>     DT::datatable() metadata <-     s |>     select(where(column_is_experimentwide)) |>     distinct()  metadata |>     t() |>     DT::datatable()"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-3c9d586e-bd26-4b46-8690-3faaa18ccf38.html","id":"anomalies","dir":"Articles","previous_headings":"","what":"Anomalies","title":"Case Study: Highly Parallel Genome-wide Expression Profiling of Individual Cells Using Nanoliter Droplets","text":"donorOrganism.donorCount seems incorrect GSM1626793 (7, instead 1).","code":"file_filter <- filters(     projectId = list(is = project_id),     fileFormat = list(is = \"txt.gz\") ) files(file_filter, as = \"tibble_expanded\") |>     select(name, donorOrganisms.donorCount, files.size) ## # A tibble: 9 × 3 ##   name                                                donorOrganisms.d…¹ files…² ##   <chr>                                                            <int>   <int> ## 1 GSE63472_P14Retina_merged_digital_expression.txt.gz                  7  5.31e7 ## 2 GSE63472_P14Retina_logDGE.txt.gz                                     7  3.32e8 ## 3 GSM1626798_P14Retina_6.digital_expression.txt.gz                     1  1.03e7 ## 4 GSM1626796_P14Retina_4.digital_expression.txt.gz                     1  8.83e6 ## 5 GSM1626794_P14Retina_2.digital_expression.txt.gz                     1  9.56e6 ## 6 GSM1626795_P14Retina_3.digital_expression.txt.gz                     1  5.58e6 ## 7 GSM1626793_P14Retina_1.digital_expression.txt.gz                     7  8.00e6 ## 8 GSM1626797_P14Retina_5.digital_expression.txt.gz                     1  7.94e6 ## 9 GSM1626799_P14Retina_7.digital_expression.txt.gz                     1  6.64e6 ## # … with abbreviated variable names ¹​donorOrganisms.donorCount, ²​files.size"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-3c9d586e-bd26-4b46-8690-3faaa18ccf38.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"sessionInfo()","title":"Case Study: Highly Parallel Genome-wide Expression Profiling of Individual Cells Using Nanoliter Droplets","text":"","code":"sessionInfo() ## R version 4.2.1 (2022-06-23) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] dplyr_1.0.10              hca_1.4.3                 ## [3] hcaCaseStudies_0.0.0.9003 BiocStyle_2.24.0          ##  ## loaded via a namespace (and not attached): ##  [1] Rcpp_1.0.9           lattice_0.20-45      tidyr_1.2.1          ##  [4] assertthat_0.2.1     rprojroot_2.0.3      digest_0.6.29        ##  [7] utf8_1.2.2           BiocFileCache_2.4.0  R6_2.5.1             ## [10] futile.options_1.0.1 RSQLite_2.2.17       evaluate_0.16        ## [13] httr_1.4.4           pillar_1.8.1         rlang_1.0.6          ## [16] curl_4.3.2           whisker_0.4          jquerylib_0.1.4      ## [19] blob_1.2.3           DT_0.25              Matrix_1.4-1         ## [22] rmarkdown_2.16       pkgdown_2.0.6        textshaping_0.3.6    ## [25] desc_1.4.2           readr_2.1.2          stringr_1.4.1        ## [28] htmlwidgets_1.5.4    bit_4.0.4            compiler_4.2.1       ## [31] xfun_0.33            pkgconfig_2.0.3      systemfonts_1.0.4    ## [34] htmltools_0.5.3      tidyselect_1.1.2     tibble_3.1.8         ## [37] bookdown_0.29        fansi_1.0.3          crayon_1.5.2         ## [40] tzdb_0.3.0           dbplyr_2.2.1         rappdirs_0.3.3       ## [43] grid_4.2.1           jsonlite_1.8.0       lifecycle_1.0.2      ## [46] DBI_1.1.3            formatR_1.12         magrittr_2.0.3       ## [49] vroom_1.5.7          cli_3.4.1            stringi_1.7.8        ## [52] cachem_1.0.6         fs_1.5.2             futile.logger_1.4.3  ## [55] bslib_0.4.0          ellipsis_0.3.2       filelock_1.0.2       ## [58] ragg_1.2.3           generics_0.1.3       vctrs_0.4.2          ## [61] lambda.r_1.2.4       tools_4.2.1          bit64_4.0.5          ## [64] glue_1.6.2           purrr_0.3.4          crosstalk_1.2.0      ## [67] hms_1.1.2            parallel_4.2.1       fastmap_1.1.0        ## [70] yaml_2.3.5           BiocManager_1.30.18  memoise_2.0.1        ## [73] knitr_1.40           sass_0.4.2"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-5b910a43-7fb5-4ea7-b9d6-43dbd1bf2776.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Case Study: Single-cell Transcriptome Atlas of the Human Corpus Cavernosum","text":"Load useful packages","code":"library(hcaCaseStudies) library(hca) library(dplyr)"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-5b910a43-7fb5-4ea7-b9d6-43dbd1bf2776.html","id":"project-information","dir":"Articles","previous_headings":"Setup","what":"Project information","title":"Case Study: Single-cell Transcriptome Atlas of the Human Corpus Cavernosum","text":"Set project id Display information project","code":"project_id <- \"5b910a43-7fb5-4ea7-b9d6-43dbd1bf2776\" project_information(project_id)"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-5b910a43-7fb5-4ea7-b9d6-43dbd1bf2776.html","id":"conventions","dir":"Articles","previous_headings":"Setup","what":"Conventions","title":"Case Study: Single-cell Transcriptome Atlas of the Human Corpus Cavernosum","text":"Statistics calculated locally use local.* column names, e.g., local.cellCount.","code":""},{"path":[]},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-5b910a43-7fb5-4ea7-b9d6-43dbd1bf2776.html","id":"project-samples","dir":"Articles","previous_headings":"Data processing","what":"Project & samples","title":"Case Study: Single-cell Transcriptome Atlas of the Human Corpus Cavernosum","text":"Create filter identify project Find project Samples associated project Columns either variable therefore describe sample-level information… …invariant reflect experiment-wide annotation","code":"project_filter <- filters(projectId = list(is = project_id)) p <- projects(project_filter) p |> glimpse() s <- samples(project_filter, as = \"tibble_expanded\") ## informative 'specimen' or 'donorOrganisms' columns s |>     select(starts_with(\"specimens\") | starts_with(\"donorOrganisms\")) |>     select(where(column_is_informative)) |>     glimpse()  s |>     count(specimens.id, specimens.disease) s |>     select(where(column_is_experimentwide)) |>     distinct() |>     glimpse()"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-5b910a43-7fb5-4ea7-b9d6-43dbd1bf2776.html","id":"data-files","dir":"Articles","previous_headings":"Data processing","what":"Data files","title":"Case Study: Single-cell Transcriptome Atlas of the Human Corpus Cavernosum","text":"types files project ? Retrieve, list content, untar (temporary location; untar relatively quick) file. Annotate files1 object local file information can extract data files, e.g., cell gene counts","code":"files1 <- files(project_filter)  files1  files1 |>     count(fileFormat)  files1 <-     files1 |>     filter(fileFormat == \"tar\")  files1 |>     select(fileId, name, fileFormat) tar_file <-     files1 |>     filter(startsWith(name, \"GSE\")) |>     files_download() |>     unname()  ## what files are in the tar? tar_files <- untar(tar_file, list = TRUE) tar_files  ## untar to a temporary location exdir <- tempfile(); dir.create(exdir) untar(tar_file, exdir = exdir) files_local <- tibble(     fileId = files1$fileId,     local.fileName = tar_files,     local.filePath = file.path(exdir, tar_files) )  files2 <-     files1 |>     ## 1:many mapping from files1 to files_local     right_join(files_local, by = \"fileId\") |>     ## make fileId unique     mutate(fileId = paste(fileId, local.fileName, sep = \"-\")) count_matrix_files <-     files2 |>     geo_gsm_cell_count(sep = \",\") |>     geo_gsm_gene_count()  count_matrix_files |>     select(local.fileName, local.cellCount, local.geneCount)"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-5b910a43-7fb5-4ea7-b9d6-43dbd1bf2776.html","id":"count-matrix","dir":"Articles","previous_headings":"Data processing","what":"Count matrix","title":"Case Study: Single-cell Transcriptome Atlas of the Human Corpus Cavernosum","text":"Compute count matrix concatenating counts GSM files.","code":"object_name <- \"local.countMatrix\" if (!cache_exists(project_id, object_name)) {     count_matrix_files |>         geo_gsm_count_matrix(reader_function = readr::read_csv) |>         cache_add(project_id, object_name) } count_matrix <- cache_read(project_id, object_name)  class(count_matrix)[1] # sparse matrix dim(count_matrix)      # genes x cells format(object.size(count_matrix), units = \"auto\")"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-5b910a43-7fb5-4ea7-b9d6-43dbd1bf2776.html","id":"singlecellexperiment","dir":"Articles","previous_headings":"Data processing","what":"SingleCellExperiment","title":"Case Study: Single-cell Transcriptome Atlas of the Human Corpus Cavernosum","text":"Column (sample) data Experiment-wide metadata Assemble SingleCellExperiment (come)","code":"geo_id <-     pull(count_matrix_files, \"name\") |>     strsplit(\"_R\") |>     vapply(head, character(1), 1L)  colData <-     s |>     select(where(column_is_informative)) |>     left_join(         bind_cols(count_matrix_files, local.geoId = geo_id),         by = c(samples.id = \"local.geoId\")     )  colData |>     DT::datatable() metadata <-     s |>     select(where(column_is_experimentwide)) |>     distinct()  metadata |>     glimpse()"},{"path":[]},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-5b910a43-7fb5-4ea7-b9d6-43dbd1bf2776.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"sessionInfo()","title":"Case Study: Single-cell Transcriptome Atlas of the Human Corpus Cavernosum","text":"","code":"sessionInfo()"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-8f630e0f-6bf9-4a04-9754-02533152a954.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Case Study: The immune cell atlas of human neuroblastoma","text":"Load useful packages","code":"library(hcaCaseStudies) library(hca) library(dplyr)"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-8f630e0f-6bf9-4a04-9754-02533152a954.html","id":"project-information","dir":"Articles","previous_headings":"Setup","what":"Project information","title":"Case Study: The immune cell atlas of human neuroblastoma","text":"Set project id Display information project","code":"project_id <- \"8f630e0f-6bf9-4a04-9754-02533152a954\" project_information(project_id)"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-8f630e0f-6bf9-4a04-9754-02533152a954.html","id":"conventions","dir":"Articles","previous_headings":"Setup","what":"Conventions","title":"Case Study: The immune cell atlas of human neuroblastoma","text":"Statistics calculated locally use local.* column names, e.g., local.cellCount.","code":""},{"path":[]},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-8f630e0f-6bf9-4a04-9754-02533152a954.html","id":"project-samples","dir":"Articles","previous_headings":"Data processing","what":"Project & samples","title":"Case Study: The immune cell atlas of human neuroblastoma","text":"Create filter identify project Find project Samples associated project preliminary exploration sample descriptions ’s easy summarize information sammples experiment, e.g., Invariant information really telling us experiment…","code":"project_filter <- filters(projectId = list(is = project_id)) p <- projects(project_filter) p |> glimpse() s <- samples(project_filter, as = \"tibble_expanded\")  ## all informative columns s |>     select(where(column_is_not_all_NA)) |>     DT::datatable() ## informative 'specimen' or donorOrganisms columns s |>     select(starts_with(\"specimens\") | starts_with(\"donorOrganisms\")) |>     select(where(column_is_informative)) s |>     count(specimens.organ, donorOrganisms.developmentStage) s |>     select(where(column_is_experimentwide)) |>     distinct() |>     glimpse()"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-8f630e0f-6bf9-4a04-9754-02533152a954.html","id":"data-files","dir":"Articles","previous_headings":"Data processing","what":"Data files","title":"Case Study: The immune cell atlas of human neuroblastoma","text":"project single ‘tar’ file archive Retrieve, list content, untar (temporary location; untar relatively quick) file. Annotate files1 object local file information can extract data files, e.g., cell gene counts","code":"files1 <- files(project_filter) files1 |>     select(name, fileFormat) tar_file <-     files1 |>     files_download() |>     unname()  ## what files are in the tar? tar_files <- untar(tar_file, list = TRUE) tar_files  ## untar to a temporary location exdir <- tempfile(); dir.create(exdir) untar(tar_file, exdir = exdir) files_local <- tibble(     fileId = files1$fileId,     local.fileName = tar_files,     local.filePath = file.path(exdir, tar_files) )  files2 <-     files1 |>     ## 1:many mapping from files1 to files_local     right_join(files_local, by = \"fileId\") |>     ## make fileId unique     mutate(fileId = paste(fileId, local.fileName, sep = \"-\")) files3 <-     files2 |>     geo_gsm_cell_count(sep = \",\") |>     geo_gsm_gene_count()  files3 |>     select(local.fileName, local.cellCount, local.geneCount)"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-8f630e0f-6bf9-4a04-9754-02533152a954.html","id":"count-matrix","dir":"Articles","previous_headings":"Data processing","what":"Count matrix","title":"Case Study: The immune cell atlas of human neuroblastoma","text":"compute count matrix concatenating counts GSM files.","code":"object_name <- \"local.countMatrix\" if (!cache_exists(project_id, object_name)) {     files3 |>         filter(startsWith(local.fileName, \"GSM\")) |>         geo_gsm_count_matrix(reader_function = readr::read_csv) |>         cache_add(project_id, object_name) } count_matrix <- cache_read(project_id, object_name)  class(count_matrix)[1] # sparse matrix dim(count_matrix)      # genes x cells format(object.size(count_matrix), units = \"auto\")"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-8f630e0f-6bf9-4a04-9754-02533152a954.html","id":"singlecellexperiment","dir":"Articles","previous_headings":"Data processing","what":"SingleCellExperiment","title":"Case Study: The immune cell atlas of human neuroblastoma","text":"Column (sample) data Experiment-wide metadata Assemble SingleCellExperiment (come)","code":"geo_id <-     pull(files3, \"local.fileName\") |>     strsplit(\"_\") |>     vapply(head, character(1), 1L) files4 <- bind_cols(files3, local.geoId = geo_id)  colData <-     s |>     select(where(column_is_informative)) |>     left_join(         bind_cols(files3, local.geoId = geo_id),         by = c(samples.id = \"local.geoId\")     ) colData |>     DT::datatable() metadata <-     s |>     select(where(column_is_experimentwide)) |>     distinct()  metadata |>     t() |>     DT::datatable()"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-8f630e0f-6bf9-4a04-9754-02533152a954.html","id":"anomalies","dir":"Articles","previous_headings":"","what":"Anomalies","title":"Case Study: The immune cell atlas of human neuroblastoma","text":"list contributors (2 identified) incomplete. NB34 NB37 gene counts different others","code":"files4 |>     count(local.geneCount)  files4 |>     filter(local.geneCount == 32966) |>     select(local.fileName, local.geneCount)"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-8f630e0f-6bf9-4a04-9754-02533152a954.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"sessionInfo()","title":"Case Study: The immune cell atlas of human neuroblastoma","text":"","code":"sessionInfo()"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-9fc0064b-84ce-40a5-a768-e6eb3d364ee0.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Case Study: Single-cell RNA-seq reveals cell type-specific molecular and genetic associations to lupus","text":"Load useful packages","code":"library(hcaCaseStudies) library(hca) library(dplyr)"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-9fc0064b-84ce-40a5-a768-e6eb3d364ee0.html","id":"project-information","dir":"Articles","previous_headings":"Setup","what":"Project information","title":"Case Study: Single-cell RNA-seq reveals cell type-specific molecular and genetic associations to lupus","text":"Set project id Display information project","code":"project_id <- \"9fc0064b-84ce-40a5-a768-e6eb3d364ee0\" project_information(project_id)"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-9fc0064b-84ce-40a5-a768-e6eb3d364ee0.html","id":"conventions","dir":"Articles","previous_headings":"Setup","what":"Conventions","title":"Case Study: Single-cell RNA-seq reveals cell type-specific molecular and genetic associations to lupus","text":"Statistics calculated locally use local.* column names, e.g., local.cellCount.","code":""},{"path":[]},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-9fc0064b-84ce-40a5-a768-e6eb3d364ee0.html","id":"project-samples","dir":"Articles","previous_headings":"Data processing","what":"Project & samples","title":"Case Study: Single-cell RNA-seq reveals cell type-specific molecular and genetic associations to lupus","text":"Create filter identify project Find project Samples associated project Columns either variable therefore describe sample-level information… …invariant reflect experiment-wide annotation","code":"project_filter <- filters(projectId = list(is = project_id)) p <- projects(project_filter) p |> glimpse() s <- samples(project_filter, as = \"tibble_expanded\") ## informative 'specimen' or 'donorOrganisms' columns s |>     select(starts_with(\"specimens\") | starts_with(\"donorOrganisms\")) |>     select(where(column_is_informative)) |>     glimpse()  ## helper function to group 'donorOrganisms.developmentStage' into deciles stage_to_age <-     function(developmentStage) {     age <- sub(\"-year-old human stage\", \"\", developmentStage)     ## some 'age' are 'variable'; the following adds 'variable' as a level     unknown_age <- grepl(\"variable\", age)     age[unknown_age] <- NA     decade <- addNA(cut(as.integer(age), seq(0, 100, 10)))     levels(decade)[is.na(levels(decade))] <-         unique(developmentStage[unknown_age])     decade }          ## summary of developmentStage (age_decade) and biologicalSex (female, male) s |>     count(donorOrganisms.biologicalSex, donorOrganisms.developmentStage) |>     ## developmentStage format is '20-year-old human stage'; summarize     ## to decade     mutate(         age_decade = stage_to_age(donorOrganisms.developmentStage)     ) |>     group_by(age_decade, donorOrganisms.biologicalSex) |>     summarize(n = sum(n), .groups = \"drop\") |>     tidyr::pivot_wider(                names_from = \"donorOrganisms.biologicalSex\",                values_from = \"n\"            ) s |>     select(where(column_is_experimentwide)) |>     distinct() |>     glimpse()"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-9fc0064b-84ce-40a5-a768-e6eb3d364ee0.html","id":"data-files","dir":"Articles","previous_headings":"Data processing","what":"Data files","title":"Case Study: Single-cell RNA-seq reveals cell type-specific molecular and genetic associations to lupus","text":"types files project ? project lot ‘fastq’ files, derived files used easily construct count matrix.","code":"files1 <- files(project_filter)  files1  files1 |>     count(fileFormat)"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-9fc0064b-84ce-40a5-a768-e6eb3d364ee0.html","id":"anomalies","dir":"Articles","previous_headings":"","what":"Anomalies","title":"Case Study: Single-cell RNA-seq reveals cell type-specific molecular and genetic associations to lupus","text":"count summary files.","code":""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/articles/hca-9fc0064b-84ce-40a5-a768-e6eb3d364ee0.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"sessionInfo()","title":"Case Study: Single-cell RNA-seq reveals cell type-specific molecular and genetic associations to lupus","text":"","code":"sessionInfo()"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Morgan. Author, maintainer.","code":""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morgan M (2022). hcaCaseStudies: Case Studies Using Data Human Cell Atlas. R package version 0.0.0.9003, https://mtmorgan.github.io/hcaCaseStudies/.","code":"@Manual{,   title = {hcaCaseStudies: Case Studies Using Data from the Human Cell Atlas},   author = {Martin Morgan},   year = {2022},   note = {R package version 0.0.0.9003},   url = {https://mtmorgan.github.io/hcaCaseStudies/}, }"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Cache of Computationally Expensive Objects for Reuse — cache","title":"Cache of Computationally Expensive Objects for Reuse — cache","text":"cache() creates / returns 'BiocFileCache' object containing information objects package-specific cache. cache_exists() tests whether object exists cache. object identified concatentation project_id object_name argument. cache_add() adds object cache, using project_id object_name create identifier. writer_function used save object cache. cache_read() retrieves object cache, using project_id object_name create identifier. reader_function used read object R. cache_remove() removes object cache.","code":""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cache of Computationally Expensive Objects for Reuse — cache","text":"","code":"cache(create = TRUE)  cache_exists(project_id, object_name)  cache_add(   object,   project_id,   object_name,   writer_function = saveRDS,   ...,   overwrite = FALSE )  cache_read(project_id, object_name, reader_function = readRDS, ...)  cache_remove(project_id, object_name)"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cache of Computationally Expensive Objects for Reuse — cache","text":"create logical(1) create cache exist? Default: TRUE. project_id character(1) project identifier, e.g., \"3c9d586e-bd26-4b46-8690-3faaa18ccf38\". object_name character(1) arbitrary object identifier. Cached objects created Case Study vignettes prefixed \"local.\", e.g., \"local.countMatrix\". object R object. writer_function function taking first argument object, second argument cache file path (determined internally) store object, additional arguments (... cache_add()) required write object. ... cache_read(), ... arguments passed 'reader_function()`. overwrite logical(1) overwrite existing object cache? default FALSE, attempts write object result error. reader_function function taking first argument cache file path (determined internally) object, additional arguments (... cache_add()) required write object.","code":""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cache of Computationally Expensive Objects for Reuse — cache","text":"cache() returns BiocFileCache object can manipulated using interface defined BiocFileCache package. cache_exists() returns logical(1) value, TRUE object identified projectId object_name exists cache. cache_add() returns, invisibly, cache file path object stored. cache_read() returns value returned reader_function(). cache_remove() warns object cache, returns FALSE invisibly, removes object returns TRUE invisibly.","code":""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cache of Computationally Expensive Objects for Reuse — cache","text":"","code":"cache() #> class: BiocFileCache #> bfccache: /home/runner/.cache/R/hcaCaseStudies #> bfccount: 0 #> For more information see: bfcinfo() or bfcquery()  faux_project_id <- \"faux-project-id\" faux_object_name <- \"local.fauxObject\"  cache_exists(faux_project_id, faux_object_name) #> [1] FALSE  cache_exists(faux_project_id, faux_object_name)       # FALSE #> [1] FALSE cache_add(letters, faux_project_id, faux_object_name) cache_exists(faux_project_id, faux_object_name)       # TRUE #> [1] TRUE  cache_read(faux_project_id, faux_object_name) #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"  cache_remove(faux_project_id, faux_object_name) cache_exists(faux_project_id, faux_object_name)       # FALSE #> [1] FALSE"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/column.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests on Column Content — column_is_not_all_NA","title":"Tests on Column Content — column_is_not_all_NA","text":"column_is_not_all_NA() tests whether elements column x NA (undefined). column_is_informative() returns TRUE column x contains values differ across rows, hence informative status row. column_is_experimentwide() returns TRUE column x NA, values column unique.","code":""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests on Column Content — column_is_not_all_NA","text":"","code":"column_is_not_all_NA(x)  column_is_informative(x)  column_is_experimentwide(x)"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests on Column Content — column_is_not_all_NA","text":"x R vector .na() defined.","code":""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests on Column Content — column_is_not_all_NA","text":"column_is_not_all_NA() returns TRUE elements x NA, FALSE otherwise.","code":""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests on Column Content — column_is_not_all_NA","text":"","code":"example_tbl <- dplyr::tibble(     x = letters,     y = c(NA, tail(letters, -1)),     z = rep(NA, length(letters)),     w = \"A\" ) example_tbl |>     dplyr::select(where(column_is_not_all_NA))     # x, y, w #> # A tibble: 26 × 3 #>    x     y     w     #>    <chr> <chr> <chr> #>  1 a     NA    A     #>  2 b     b     A     #>  3 c     c     A     #>  4 d     d     A     #>  5 e     e     A     #>  6 f     f     A     #>  7 g     g     A     #>  8 h     h     A     #>  9 i     i     A     #> 10 j     j     A     #> # … with 16 more rows  example_tbl |>     dplyr::select(where(column_is_informative))    # x, y #> # A tibble: 26 × 2 #>    x     y     #>    <chr> <chr> #>  1 a     NA    #>  2 b     b     #>  3 c     c     #>  4 d     d     #>  5 e     e     #>  6 f     f     #>  7 g     g     #>  8 h     h     #>  9 i     i     #> 10 j     j     #> # … with 16 more rows  example_tbl |>     dplyr::select(where(column_is_experimentwide)) # w #> # A tibble: 26 × 1 #>    w     #>    <chr> #>  1 A     #>  2 A     #>  3 A     #>  4 A     #>  5 A     #>  6 A     #>  7 A     #>  8 A     #>  9 A     #> 10 A     #> # … with 16 more rows"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/geo.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize GEO Files — geo_gsm_cell_count","title":"Summarize GEO Files — geo_gsm_cell_count","text":"geo_gsm_cell_count() parses GEO GSM file number cells present file. geo_gsm_gene_count() parses GEO GSM file number genes present file. geo_gsm_count_matrix() returns sparse matrix gene x cell counts.","code":""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/geo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize GEO Files — geo_gsm_cell_count","text":"","code":"geo_gsm_cell_count(.data, sep = \"\\\\t\")  geo_gsm_gene_count(.data)  geo_gsm_count_matrix(.data, reader_function = readr::read_tsv)"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/geo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize GEO Files — geo_gsm_cell_count","text":".data files_tbl_hca object (e.g., created hca::files()) containing fileId local.filePath columns. rows .data must refer GSM files. sep character(1) single character used separate fields GSM file. Typically tab ('\\\\t\", default) comma \",\". reader_function function read GSM file. function come readr package. default read_tsv appropriate tab-delimited CSV files; common alternative read_csv comma-separated GSM files.","code":""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/geo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize GEO Files — geo_gsm_cell_count","text":"geo_gsm_cell_count() returna .dataaugmented columnlocal.cellCount` reporting number cells file. geo_gsm_gene_count() returns .data augmented column gene counts, \"local.geneCount\". geo_gsm_count_matrix() returns sparse matrix rows (genes) equal unique genes input files, columns (cells) equal total cell count GSM files. Samples order present .data.","code":""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/geo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize GEO Files — geo_gsm_cell_count","text":"geo_gsm_cell_count() parses first line GSM file, assuming line 'header' gene first column cell labels subsequent columns. number cells number columns file minus 1. geo_gsm_gene_count() counts number lines file, reports number genes number minus one, assuming first line 'header' line. geo_gsm_count_matrix() parses GEO GSM file turn, assuming file contains dense matrix. dense matrix converted sparse representation. file processed, new genes appended original index, cells appended j index. final result concatenation sparse matrix representations. Progress reports amount memory currently consumed cummulating object.","code":""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/project.html","id":null,"dir":"Reference","previous_headings":"","what":"Project-related Queries — project_information","title":"Project-related Queries — project_information","text":"project_information() queries HCA databasee project title, description, contact, DOI, publication URI. project_title() returns title project, cleaned remove trailing trailing .. print.project_information() formats result project_information() legible manner.","code":""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project-related Queries — project_information","text":"","code":"project_information(project_id)  project_title(project_id)  # S3 method for project_information print(x, ...)"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project-related Queries — project_information","text":"project_id character(1) project identifier, e.g., \"3c9d586e-bd26-4b46-8690-3faaa18ccf38\". x object class project_information, result call project_information(). ... additional arguments, required conform print generic used.","code":""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project-related Queries — project_information","text":"project_information() returns tibble single row, columns containing information project. tibble class project_information printed interactive session formatted long columns, e.g., projectDescription, easily read. project_title() returns character(1) vector containing project title. print.project_information() invoked automatically result project_information() displayed side effect displaying object.","code":""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Project-related Queries — project_information","text":"","code":"project_id <- \"3c9d586e-bd26-4b46-8690-3faaa18ccf38\" project_information(project_id) #> Title #>   Highly Parallel Genome-wide Expression Profiling of Individual Cells #>   Using Nanoliter Droplets #> Contributors (unknown order; any role) #>   Joshua R Sanes, Rahul Satija, Alex K Shalek, Anindita Basu, James #>   Nemesh, Itay Tirosh, John J Trombetta, Aviv Regev, Ami Day, Evan Z #>   Macosko, Karthik Shekhar, Allison R Bialas, Steven A McCarroll, David #>   A Weitz, Nolan Kamitaki, Emily M Martersteck, Melissa Goldman #> Description #>   Cells, the basic units of biological structure and function, vary #>   broadly in type and state. Single-cell genomics can characterize cell #>   identity and function, but limitations of ease and scale have #>   prevented its broad application. Here we describe Drop-seq, a #>   strategy for quickly profiling thousands of individual cells by #>   separating them into nanoliter-sized aqueous droplets, associating a #>   different barcode with each cell's RNAs, and sequencing them all #>   together. Drop-seq analyzes mRNA transcripts from thousands of #>   individual cells simultaneously while remembering transcripts' cell #>   of origin. We analyzed transcriptomes from 44,808 mouse retinal cells #>   and identified 39 transcriptionally distinct cell populations, #>   creating a molecular atlas of gene expression for known retinal cell #>   classes and novel candidate cell subtypes. Drop-seq will accelerate #>   biological discovery by enabling routine transcriptional profiling at #>   single-cell resolution. #> doi: 10.1016/j.cell.2015.05.002 #> url: https://www.cell.com/fulltext/S0092-8674(15)00549-8 #> project: https://data.humancellatlas.org/explore/projects/3c9d586e-bd26-4b46-8690-3faaa18ccf38  project_title(project_id) #> [1] \"Highly Parallel Genome-wide Expression Profiling of Individual Cells Using Nanoliter Droplets\""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/use_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Templates For New Case Studies — use_template","title":"Templates For New Case Studies — use_template","text":"use_template() creates new R markdown file starting point case study. file requires manual editing customize specific project.","code":""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/use_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Templates For New Case Studies — use_template","text":"","code":"use_template(project_id, case_study_path, overwrite = FALSE)"},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/use_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Templates For New Case Studies — use_template","text":"project_id character(1) project identifier, e.g., \"3c9d586e-bd26-4b46-8690-3faaa18ccf38\". case_study_path character(1) path directory case study created. overwrite logical(1) overwrite case study created function project_id case_study_path? Default: FALSE.","code":""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/use_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Templates For New Case Studies — use_template","text":"use_template() returns path rendered template (case_study_path) approriate substitution variables.","code":""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/use_template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Templates For New Case Studies — use_template","text":"use_template() queries HCA data portal project title associated project_id, uses title vignette index entry rendered markdown doeucment. project_id injected document, references project_id defined. Rendering template also injects current date, package name, package version.","code":""},{"path":"https://mtmorgan.github.io/hcaCaseStudies/reference/use_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Templates For New Case Studies — use_template","text":"","code":"project_id <- \"3c9d586e-bd26-4b46-8690-3faaa18ccf38\" case_study_path <- tempfile(); dir.create(case_study_path) rmd <- use_template(project_id, case_study_path) readLines(rmd) |>     head() |>     noquote() #> [1] ---                                                                                                                #> [2] title: \"Case Study: Highly Parallel Genome-wide Expression Profiling of Individual Cells Using Nanoliter Droplets\" #> [3] author:                                                                                                            #> [4]   - name: Martin Morgan                                                                                            #> [5]     affiliation:                                                                                                   #> [6]     - Roswell Park Comprehensive Cancer Center"}]
